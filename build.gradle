buildscript {
   repositories {
      mavenCentral()
      maven { url "https://oss.sonatype.org/content/groups/public"}
   }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.18.16'
    id 'maven-publish'
}

group = 'com.github.rundeck-plugins'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'pl.allegro.tech.build.axion-release'
sourceCompatibility = 11
defaultTasks 'clean', 'build'
ext.rundeckPluginVersion = '1.1'
scmVersion {
    ignoreUncommittedChanges = false
    tag {
        prefix = 'v'
        versionSeparator = ''
        def origDeserialize=deserialize
        //apend .0 to satisfy semver if the tag version is only X.Y
        deserialize = { config, position, tagName ->
            def orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}
project.version = scmVersion.version

configurations{
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs {
    }

    //declare compile to extend from pluginLibs so it inherits the dependencies
    implementation {
        extendsFrom pluginLibs
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}
dependencies {
    implementation libs.slf4jApi
    implementation(libs.rundeckCore) {
        exclude group: "com.google.guava"
    }
    implementation libs.bundles.awsSdk
    implementation libs.jacksonDatabind
    implementation libs.commonsBeanutils

    pluginLibs(libs.awsSdkEc2) {
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.dataformat"
    }
    pluginLibs(libs.awsSdkSts) {
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.dataformat"
    }

    testImplementation libs.bundles.testLibs
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}


jar {
    //include contents of output dir
    from "$buildDir/output"
    manifest {
        attributes 'Rundeck-Plugin-Name': 'EC2 Nodes Plugin'
        attributes 'Rundeck-Plugin-Description': 'Resource Model Source plugin that provides Amazon EC2 Instances as nodes.'
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '2.2.2+'
        attributes 'Rundeck-Plugin-Tags': 'java,aws,ec2,resource model'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Author': 'Rundeck, Inc.'
        attributes 'Rundeck-Plugin-Source-Link': 'https://github.com/rundeck-plugins/rundeck-ec2-nodes-plugin'
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true', 'Rundeck-Plugin-Libs-Load-First':'false'
        //create space-separated list of pluginLibs
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')
        attributes 'Rundeck-Plugin-Classnames': 'com.dtolabs.rundeck.plugin.resources.ec2.EC2ResourceModelSourceFactory', 'Rundeck-Plugin-Libs': "${libList}"
        attributes 'Rundeck-Plugin-File-Version': version
    }
}

//set jar task to depend on copyToLib
jar.dependsOn(copyToLib)

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'rundeck-ec2-nodes-plugin'
            from components.java
        }
    }
}